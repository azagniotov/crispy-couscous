import java.time.Instant
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter

final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter
		.ofPattern("yyyy-MM-dd HH:mm:ssZ")
		.withZone(ZoneOffset.systemDefault())

def getVersion = { ->
	def versionFile = file("latest-version.txt")
	if (!versionFile.exists()) {
		return "MISSING-VERSION"
	}
	return versionFile.text.trim()
}


project.ext.thirdPartyDependencies = configurations.runtimeClasspath.resolve().findAll { file ->
	return file.name.contains("gson")
}

project.ext.projectManifest = manifest {
	def manifestClasspath = project.ext.thirdPartyDependencies.collect { it.getName() }.join(',')
	attributes 'Package': 'io.github.azagniotov.language',
			'Class-Path': manifestClasspath,
			'Implementation-Title': "${projectName}",
			'Implementation-Version': "${getVersion()}",
			'Implementation-Vendor': 'Alexander Zagniotov',
			'Built-By': 'Alexander Zagniotov',
			'Built-Date': DATE_TIME_FORMATTER.format(Instant.now()),
			'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
			'Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
}

jar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	manifest = project.ext.projectManifest
	version = getVersion()
	from sourceSets.main.output
	from(project.ext.thirdPartyDependencies.collect { zipTree(it) })
	doLast {
		println ":" + name + " Packaged the following dependencies: " + project.ext.thirdPartyDependencies.collect { File file -> file.name }
	}
}
