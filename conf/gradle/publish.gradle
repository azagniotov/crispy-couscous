java.withSourcesJar()
java.withJavadocJar()

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId = project.findProperty("group").toString()
			artifactId = project.findProperty("artifactId").toString()

			artifact sourcesJar
			artifact javadocJar
			artifact jar

			afterEvaluate {
				version = jar.getArchiveVersion().get()
			}

			pom {
				name.set(project.findProperty("projectName").toString())
				description.set(project.findProperty("projectDescription").toString())
				url.set(project.findProperty("projectWebUrl").toString())

				licenses {
					license {
						name.set(project.findProperty("projectLicense").toString())
						url.set(project.findProperty("projectLicenseUrl").toString())
					}
				}
				developers {
					developer {
						id.set(project.findProperty("projectDeveloperId").toString())
						name.set(project.findProperty("projectDeveloperName").toString())
						email.set(project.findProperty("projectDeveloperEmail").toString())
						url.set(project.findProperty("projectDeveloperUrl").toString())
					}
				}
				scm {
					connection.set(project.findProperty("projectScmConnection").toString())
					developerConnection.set(project.findProperty("projectScmDeveloperConnection").toString())
					url.set(project.findProperty("projectScmUrl").toString())
				}
			}
		}
	}
	repositories {
		maven {
			url = uri("file://${layout.buildDirectory.get().asFile.absolutePath}/${mavenCentralBundleAssetsDir}")
		}

		maven {
			name = "GitHubPackages"
			url = uri(project.findProperty("githubPackagesUrl").toString())
			credentials {
				username = project.findProperty("projectDeveloperId").toString()
				password = project.ext.githubPackagesToken
			}
		}
	}
}

signing {
	useGpgCmd()
	sign publishing.publications.mavenJava
}

task prepMavenCentralBundle(type: Zip) {
	description = "Creates a ZIP archive of the deployable assets and their checksums"

	archiveBaseName = "${artifactId}"
	archiveVersion = jar.getArchiveVersion().get()
	archiveClassifier = "maven-central-bundle"
	from("${layout.buildDirectory.get().asFile.absolutePath}/${mavenCentralBundleAssetsDir}") {
		include "**/*"
	}
}
prepMavenCentralBundle.dependsOn publishMavenJavaPublicationToMavenRepository
